# -*- coding: utf-8 -*-
"""TJ_pseudorandomize.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11VnYneyCG2yeOmWqEe0PjNYqIdAKgeDP
"""

import numpy as np
# define pseudorandomization function: draw without replacement for repeated set
def pseudo_randomize(nrand):
  trials = list(range(nrand)) + list(range(nrand))
  n = 2 * nrand
  trialseq = list(np.random.choice(trials, n, replace = False))
  return trialseq

def repeat_pseudo_randomize(nrand, numreps):
  random_trial_types = []
  for i in range(numreps):
    random_trial_types += pseudo_randomize(nrand)
  return random_trial_types

num_rand = 8 # number of distinct random trials
num_reps = 100 # number of randomized trial reps
random_A = repeat_pseudo_randomize(num_rand, num_reps)
print(random_A)

from os import wait4
import csv
import numpy as np
# 100 trials with online and endpoint feedback and 0 degree rotation
# trial 1: instruction 1, 45 degree rotation, 0 degree jump angle
# trial 2: instruction 2, 45 rotation, 45 jump angle
# trial 3: instruction 3, 45 rotation, 90 jump angle
# trial 4: instruction 4, first randomized trial
# 720 remaining randomized trials, maybe 640
# jump angle and rotation are the only things we randomize

header = ['trials', 'endpoint_feedback', 'online_feedback', 'aim_report', 'aim_ring', 'rotation', 
          'instruction', 'target_angle', 'target_distance', 'size', 'jump_onset', 
          'jump_angle', 'jump_radius', 'hollow' , 'distractor']

# hollow = 0 (always filled)
# distractor = 0 (jump instead of the distractor appearing simultaneously with original target)


n_b = 100 # number of baseline trials
n_i = 4 # number of instruction trials
n_r = num_rand * num_reps + 1 # number of randomized trials
n_nr = n_b + n_i # number of nonrandom trials
n = n_b + n_i + n_r # number of trials = 10 baseline + 801 training

# define conditions for the random trials
num_params = 14
trials_A = np.zeros((num_rand, num_params))

angle = 90
dist = 80
s = 12
onset = 13.3

trials_A[0] = [1, 1, 0, 0, 4, 0, angle, dist, s, onset, 0, dist, 0, 0]
trials_A[1] = [1, 1, 0, 0, 4, 0, angle, dist, s, onset, 4, dist, 0, 0]
trials_A[2] = [1, 1, 0, 0, 4, 0, angle, dist, s, onset, -4, dist, 0, 0]
trials_A[3] = [1, 1, 0, 0, 4, 0, angle, dist, s, onset, 0.01, dist, 0, 0]
trials_A[4] = [1, 1, 0, 0, -4, 0, angle, dist, s, onset, 0, dist, 0, 0]
trials_A[5] = [1, 1, 0, 0, -4, 0, angle, dist, s, onset, 4, dist, 0, 0]
trials_A[6] = [1, 1, 0, 0, -4, 0, angle, dist, s, onset, -4, dist, 0, 0]
trials_A[7] = [1, 1, 0, 0, -4, 0, angle, dist, s, onset, 0.01, dist, 0, 0]

def retrieve_random_row(w):
  # print(random_A[w - n_nr])
  # print(trials)
  # print(trials[0])
  # print(trials[7])
  # print(trials[random_A[w - n_nr]])
  return list(trials_A[random_A[w - n_nr]])

# define conditions for nonrandom trials
# angle = 90
# dist = 80
# s = 12
# onset = 13.3 

trials = list(range(1, n_nr + 1))
endpoint_feedback = [1.0] * n_nr
online_feedback = [1.0] * n_nr
aim_report = [0.0] * n_nr
aim_ring = [0.0] * n_nr
rotation = [0.0] * n_b + [45.0] * n_i
instruction = [0.0] * (n_b - 1) + list(range(1, n_i + 1))
instruction = [float(x) for x in instruction] 

target_angle = [angle * 1.0] * n_nr
target_distance = [dist * 1.0] * n_nr
size = [s * 1.0] * n_nr
jump_onset = [onset] * n_nr
jump_angle = [0.0] * (n_b) + [0.0, 45.0, 90.0]
jump_radius = [dist * 1.0] * n_nr
hollow = [0.0] * n_nr
distractor = [0.0] * n_nr

# create file 
with open('TJ_T23.csv', 'w', encoding='UTF8', newline='') as f:
    writer = csv.writer(f)

    # write the header
    writer.writerow(header)

    # nonrandom rows
    for w in range(n_nr - 1):
      writer.writerow([trials[w], endpoint_feedback[w], online_feedback[w], 
                       aim_report[w], aim_ring[w], rotation[w], instruction[w], 
                       target_angle[w], target_distance[w], size[w], 
                       jump_onset[w], jump_angle[w], jump_radius[w], hollow[w], 
                       distractor[w]])
    # random rows
    for w in range(n_nr - 1, n - 1):
        random_row = [w + 1] + retrieve_random_row(w)
        if w == 502:
            # trial 503 has instruction (5th parameter) = 5
            random_row[6] = 5.0
            # have an extra trial bc learning is measured in pairs
        writer.writerow(random_row)

    
    # 800 + 100 + 3 + 1 = 904 trials total

# import numpy as np
# # define conditions for the random trials
# nrand = 8
# trials_A = np.zeros((nrand, 14))

# angle = 90
# dist = 80
# s = 12
# onset = 13.3
# trials_A[0] = [1, 1, 0, 0, 4, 0, angle, dist, s, onset, 0, dist, 0, 0]
# trials_A[1] = [1, 1, 0, 0, 4, 0, angle, dist, s, onset, 4, dist, 0, 0]
# trials_A[2] = [1, 1, 0, 0, 4, 0, angle, dist, s, onset, -4, dist, 0, 0]
# trials_A[3] = [1, 1, 0, 0, 4, 0, angle, dist, s, onset, 0.01, dist, 0, 0]
# trials_A[4] = [1, 1, 0, 0, -4, 0, angle, dist, s, onset, 0, dist, 0, 0]
# trials_A[5] = [1, 1, 0, 0, -4, 0, angle, dist, s, onset, 4, dist, 0, 0]
# trials_A[6] = [1, 1, 0, 0, -4, 0, angle, dist, s, onset, -4, dist, 0, 0]
# trials_A[7] = [1, 1, 0, 0, -4, 0, angle, dist, s, onset, 0.01, dist, 0, 0]
# print(trials_A)
# print(trials_A.shape)